"""
The AI class represents the AI opponent in the game.
It's responsible for generating its own game board and placing its ships randomly.

The AI will make decisions on where to guess based on the information provided in the sentences and its strategies.

"""
from .constants import *
from .ship import *
from .sentence import *
import random

class OpponentAI:
    """
    Represents a ship object in the game.
    """

    # Define a class-level variable to hold the AI modes
    POSSIBLE_MODES = ["Target", "Hunt"]

    def __init__ (self, board, user):
        """
        Constructor for the AI class.
        """

        self.board = board
        self.ships = []
        self.opponent = user
        self.mode = OpponentAI.POSSIBLE_MODES[0]

        # AI state variables
        self.knowledge = set() # List of potential targets
        self.moves_made = set()
        self.last_hit = None

        
    def get_board(self):
        return self.board
    

    def ask_if_hit(self, row, col):
        """
        Returns true if the cell passed as a parameter contains a ship
        """     
        return self.board.get_cell(row, col).is_ship


    def generate_coords(self, length):
        """
        Generates a random set of coordinates, ensuring they are consecutive and do not contain a ship.
        """

        while True:
            # Determine the direction (horizontal or vertical) randomly.
            orientation = random.choice(['vertical', 'horizontal'])

            # Randomly select the starting position.
            if orientation == 'horizontal':
                start_row = random.randint(0, 9 - 1)
                start_col = random.randint(0, 9 - length)
            else:
                start_row = random.randint(0, 9 - length)
                start_col = random.randint(0, 9 - 1)

            # Generate consecutive coordinates based on the chosen direction.
            coords = []
            for i in range(length):
                if orientation == 'horizontal':
                    coords.append((start_row, start_col + i))
                else:
                    coords.append((start_row + i, start_col))

            # Check if the generated coordinates contain any cells with ships.
            has_ship = any(self.board.get_cell(row, col).is_ship() for row, col in coords)

            # If there are no ships in the generated coordinates, return them.
            if not has_ship:
                return coords


    def place_ship(self, win, length):
        """
        Places AI ship on the game board using coordinates generated by generate_coords.
        """

        coords = self.generate_coords(length)

        temp_cells = []
        for (row, col) in coords:
            temp_cells.append(self.board.get_cell(row, col))

        ship = Ship(temp_cells)  # Creates the ship
        self.board.draw_ship(win, ship)
        self.ships.append(ship)  # Stores all the AI ships
        self.board.update_board()
        
        return ship


    def hunt_mode(self):
        """
        In Hunt mode, the AI will shoot at random coordinates with even parity
        (later on, the hunt mode will take into account the pdf_value of each cell,
        so it can redirect the movements to cells with the highest chance of having a ship)
        """

        # Generate random even row and column indices
        row = random.randint(0, 9)  
        col = random.randint(0, 9)  

        # Check if the cell contains a ship part
        hit = self.opponent.ask_if_hit(row, col)
        # Store cell coords in a tuple
        cell = row, col

        data = (hit, cell)

        return data


    def get_orientation(self, cell_1, cell_2):
        """
        Determine the orientation of the ship based on two cells.
        Returns 'horizontal' if the ship is horizontally placed,
        'vertical' if the ship is vertically placed.
        """
        x1, y1 = cell_1
        x2, y2 = cell_2

        if x1 == x2:
            return 'vertical'  # The ship is vertically placed
        elif y1 == y2:
            return 'horizontal'  # The ship is horizontally placed


    def target_mode(self):
        """
        Enter target mode once a ship is hit, then:
        1- From the knowledge set:
            1.a- Select the first cell from the set and fire to its location.
            1.b- Modify the sentence according to the result of the previous move:
                * if the guess was a hit, create a new sentence with the two bordering cells.
                * else delete that cell from the knowledge set
        """

        is_a_hit = False
        knowledge = self.knowledge
        cell = list(knowledge)[0]  # Convert the set to a list and then access the first element        

        row, col = cell
        hit = self.opponent.ask_if_hit(row, col)

        if hit:
            orientation = self.get_orientation(self.last_hit, cell)
            new_knowledge = Sentence(cell, orientation)  # Create new knowledge using the cell and its orientation
               
            # Modify knowledge based on the result
            self.knowledge.clear()  # Clear the previous knowledge
            self.knowledge.update(new_knowledge.cells)  # Add the cells from new knowledge
            is_a_hit = True
        else:
            self.knowledge.remove(cell)

        data = (is_a_hit, cell)
        return data


    def make_guess(self): 
        """
        Makes a guess: at first the AI will start in 'Hunt' mode. 
        Once a ship is touched, the inferences will be put into the sentence and the AI ​​will enter 'target' mode
        """

        is_a_hit = False
        cell = None

        # if there is no knowledge about possible targets, enter 'Hunt' mode
        if not self.knowledge:

            is_a_hit, cell = self.hunt_mode()

            # If the guess shit a ship, add new knowledge
            if is_a_hit:
                # Construct a new Sentence object and update knowledge
                new_knowledge = Sentence(cell, None)
                self.knowledge.update(new_knowledge.cells)  # Add the cells from new knowledge
                self.last_hit = cell # Store last hit

        # if there is knowledge about possible targets, enter 'Target' mode
        else:
            is_a_hit, cell = self.target_mode()
            self.last_hit = cell  # Store last hit
        
        data = (is_a_hit, cell)
        return data


